<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="campaign">
	<!-- CAMPAIGN -->
	
	<!-- 기간이 만료됐는지 확인하여 만료 시 상태를 0으로 바꾼다 -->	
	<update id="expireIng" parameterType="int">
		UPDATE CAMPAIGN_ING
		   SET STATUS = 0
		  WHERE SYSDATE > END_DATE
  	</update>
	
	<!-- 진행중인 캠페인 목록 불러오기 -->
	<select id="ingList" resultType="CampaignIngVO">
	<!-- 	SELECT CAMPAIGN_IDX, TITLE, C_CONTENT, 
        	   GOAL, END_DATE, BASE_POINT, ESTIMATED_POINT, 
        	   C_FILE, C_TOTPOINT, EMBLEM, USER_IDX, KEYWORD_IDX1, KEYWORD_IDX2, KEYWORD_IDX3
  		  FROM CAMPAIGN_ING WHERE STATUS = 1 -->
  		SELECT *
  		  FROM CAMPAIGN_ING WHERE STATUS = 1
  	
  	</select>

  	
	<!-- 진행중인 캠페인 하나 불러오기 -->
  	<select id="ingOne" parameterType="int" resultType="CampaignIngVO">
  		SELECT U.NICKNAME, C.*
		  FROM USERS U, CAMPAIGN_ING C
		 WHERE U.USER_IDX = C.USER_IDX
		   AND C.CAMPAIGN_IDX = ${campaign_idx} 
  	</select>
  	
  	  	
	<!-- 한 캠페인에 참여중인 이용자 닉네임 목록 불러오기 -->
  	<select id="participant" parameterType="int" resultType="string">
  		SELECT NICKNAME FROM USERS
  		 WHERE USER_IDX IN (SELECT USER_IDX FROM CAMPAIGN_ING_USER
		 WHERE CAMPAIGN_IDX = #{campaign_idx})
  	</select>
  	
  	
  	
  	<!-- <select id="cKeyword" parameterType="int" resultType="com.knock.model.vo.CKeywordVO">
  	<![CDATA[
  	
  	(SELECT (SELECT k.k_content
                  FROM CAMPAIGN_ING C, KEYWORD K
                 WHERE c.keyword_idx1 = k.keyword_idx AND C.CAMPAIGN_IDX= #{campaign_idx} ) AS KEYWORD1
              ,(SELECT K.K_CONTENT AS KEYWORD2
                  FROM CAMPAIGN_ING C, KEYWORD K
                 WHERE c.keyword_idx2 = k.keyword_idx AND C.CAMPAIGN_IDX= #{campaign_idx} ) AS KEYWORD2
              ,(SELECT K.K_CONTENT AS KEYWORD3
                  FROM CAMPAIGN_ING C, KEYWORD K
                 WHERE c.keyword_idx3 = k.keyword_idx AND C.CAMPAIGN_IDX= #{campaign_idx}) AS KEYWORD3
                FROM CAMPAIGN_ING WHERE CAMPAIGN_IDX= #{campaign_idx})
                
                ]]>
  	</select> -->
  	
    	<!-- 캠페인 제안 -->
  	<insert id="proposal" parameterType="ProposalVO">
  		INSERT INTO PROPOSAL(PROPOSAL_IDX, GOAL, GOAL_POINT, 
  							P_CONTENT, P_TITLE, USER_IDX,
  							P_KEYWORD1, P_KEYWORD2, P_KEYWORD3)
					VALUES (PROPOSAL_IDX_SEQ.nextval, #{goal}, #{goal_point},
						   #{p_content}, #{p_title}, #{user_idx},
						   #{p_keyword1}, #{p_keyword2}, #{p_keyword3})
  	</insert>
  	
  	<update id="expireNom" parameterType="int">
		UPDATE CAMPAIGN_NOMINEE
		   SET STATUS = 0
		  WHERE SYSDATE > END_TIME
  	</update>
  	
  	<!-- 펀딩중 캠페인 리스트  -->
  	<select id="nomineeList" resultType="NomineeVO">
		SELECT CAMPAIGN_IDX, GOAL, TITLE, C_CONTENT, 
        	   START_TIME, END_TIME, COLLECTED_POINT, 
       		   C_FILE, C_CATEGORY, GOAL_POINT, PROPOSAL_IDX, USER_IDX 
          FROM CAMPAIGN_NOMINEE
  	</select>
  	
  	<select id="nominee" resultType="NomineeVO">
  		SELECT U.NICKNAME, N.*
		  FROM USERS U, CAMPAIGN_NOMINEE N
		 WHERE U.USER_IDX = N.USER_IDX
		   AND N.STATUS = 1
		   
		<!-- SELECT campaign_idx, GOAL, TITLE, C_CONTENT, 
        	   START_TIME, END_TIME, COLLECTED_POINT, 
        	   C_FILE, C_CATEGORY, GOAL_POINT, PROPOSAL_IDX, USER_IDX 
          FROM CAMPAIGN_NOMINEE 
         WHERE STATUS=1 -->
  	</select>
  	
  	<select id="nomUserList" parameterType="int" resultType="com.knock.model.vo.NomUserVO">
		SELECT NICKNAME FROM USERS
  		 WHERE USER_IDX IN (SELECT USER_IDX FROM CAMPAIGN_NOM_USER
		 WHERE campaign_idx = #{campaign_idx})
  	</select>
  	
  	<insert id="nomUserInsert" parameterType="com.knock.model.vo.NomUserVO">
  		INSERT INTO CAMPAIGN_NOM_USER 
  					(USER_IDX, campaign_idx, SPENT_POINT)
  			 VALUES (#{user_idx}, #{campaign_idx}, #{spent_point})
  	</insert>
  	
  		<!-- 펀딩 참여 시, COLLECTED POINT 업데이트  -->
  	<update id="funding" parameterType="int">
		UPDATE CAMPAIGN_NOMINEE
		   SET COLLECTED_POINT = COLLECTED_POINT + #{spent_point}
		 WHERE campaign_idx = #{campaign_idx} 
  	</update>
  	
  	<select id="nomUserCheck" parameterType="com.knock.model.vo.NomUserVO" resultType="int">
		SELECT USER_IDX FROM CAMPAIGN_NOM_USER
		 WHERE USER_IDX = #{user_idx} AND campaign_idx = #{campaign_idx}
  	</select>
  	
  	<!-- <select id="keywordList" resultType="com.knock.model.vo.KeywordVO">
  		SELECT * FROM KEYWORD ORDER BY COUNT DESC
  	</select> -->
  	
  	
  	<!--  포인트 리턴해주기
  	 UPDATE USERS 
 		SET USED_POINT = USED_POINT - 300
 	  WHERE USERS.USER_IDX = (
                SELECT U.USER_IDX
                  FROM USERS U, CAMPAIGN_NOMINEE N
                 WHERE U.USER_IDX = N.USER_IDX);
  	-->
  	<select id="ingUserCheck" parameterType="com.knock.model.vo.IngUserVO" resultType="int">
  		SELECT USER_IDX FROM CAMPAIGN_ING_USER 
  		WHERE CAMPAIGN_IDX = #{campaign_idx} AND USER_IDX = #{user_idx}
  	</select>
  	
  	<!-- 포인트 분배해주기  -->
  	
  	<!-- SELECT REST_POINT, REST_POINT * 0.5 AS FIRST, REST_POINT * 0.3 AS SECOND , REST_POINT * 0.2 AS THIRD
FROM (SELECT (SELECT C_TOTPOINT - (300 * (SELECT COUNT(*)-3 FROM CAMPAIGN_ING_USER WHERE CAMPAIGN_IDX= 1))
        FROM campaign_ing WHERE campaign_idx = 1) AS REST_POINT
    FROM DUAL);  -->
  	
  	
  </mapper>